name: Release Artifact

on:
  workflow_run:
    workflows: ["Build_oneplus_sm8750"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      run-id:
        description: '特定工作流运行的ID（可选）'
        required: false

permissions:
  contents: write
  actions: read
  packages: read

env:
  GH_VERSION: "2.45.0"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # 1. 安装 GitHub CLI (带缓存)
      - name: Install GitHub CLI with cache
        id: install-gh
        run: |
          GH_PATH="$HOME/.gh-bin/gh-$GH_VERSION"
          if [ -f "$GH_PATH" ]; then
            echo "✅ GitHub CLI $GH_VERSION already installed, skipping download"
            echo "gh_path=$GH_PATH" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          mkdir -p "$HOME/.gh-bin"
          echo "⬇️ Downloading GitHub CLI v$GH_VERSION..."
          curl -fsSL "https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_amd64.tar.gz" -o gh.tar.gz
          tar -xzf gh.tar.gz
          mv gh_${GH_VERSION}_linux_amd64/bin/gh "$GH_PATH"
          rm -rf gh.tar.gz gh_${GH_VERSION}_linux_amd64
          echo "gh_path=$GH_PATH" >> $GITHUB_OUTPUT
        env:
          GH_VERSION: ${{ env.GH_VERSION }}
        
      - name: Add gh to PATH
        run: |
          gh_path=$(dirname '${{ steps.install-gh.outputs.gh_path }}')
          echo "$gh_path" | sudo tee -a /etc/environment
          echo "$gh_path" >> $GITHUB_PATH
        
      # 2. 确定运行ID（更健壮的实现）
      - name: Resolve Workflow Run ID
        id: resolve_run_id
        run: |
          export PATH="$PATH:${{ steps.install-gh.outputs.gh_path | dirname }}"
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            run_id="${{ github.event.workflow_run.id }}"
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
            echo "tag=release-auto-$run_id" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.inputs.run-id }}" ]; then
            run_id="${{ github.event.inputs.run-id }}"
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
            echo "tag=release-manual-$run_id" >> $GITHUB_OUTPUT
          else
            response=$(gh api -H "Accept: application/vnd.github.v3+json" \
              "/repos/$GITHUB_REPOSITORY/actions/runs?event=push&status=completed&conclusion=success&workflow=Build_oneplus_sm8750.yml&per_page=1")
            
            # 使用更可靠的数据提取方式
            run_id=$(echo "$response" | jq -r '.workflow_runs[0].id // empty')
            if [ -z "$run_id" ]; then
              echo "❌ 无法获取最近成功的运行ID！响应内容："
              echo "$response"
              exit 1
            fi
            
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
            echo "tag=release-auto-$run_id" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 3. 完全重构：获取和验证构建产物
      - name: Get and Verify Artifact
        id: get_artifact
        run: |
          # 1. 获取所有构建产物
          artifacts_json=$(gh api -H "Accept: application/vnd.github.v3+json" \
            "/repos/$GITHUB_REPOSITORY/actions/runs/${{ steps.resolve_run_id.outputs.run_id }}/artifacts")
          
          total_artifacts=$(echo "$artifacts_json" | jq -r '.total_count')
          if [ "$total_artifacts" -eq 0 ]; then
            echo "❌ 错误：此运行没有可用的构建产物！"
            exit 1
          fi
          
          # 2. 获取第一个构建产物的下载URL
          download_url=$(echo "$artifacts_json" | jq -r '.artifacts[0].archive_download_url')
          
          # 3. 下载构建产物（带重试机制）
          artifact_zip="/tmp/artifact_${{ steps.resolve_run_id.outputs.run_id }}.zip"
          for i in {1..3}; do
            echo "⬇️ 尝试 #$i 下载构建产物..."
            curl -L -H "Authorization: Bearer $GH_TOKEN" \
              -o "$artifact_zip" \
              "$download_url"
            
            # 检查下载文件是否有效
            if unzip -t "$artifact_zip" &> /dev/null; then
              echo "✅ 构建产物下载成功且有效"
              break
            else
              if [ $i -eq 3 ]; then
                echo "❌ 错误：构建产物下载无效！尝试次数已用完"
                exit 1
              fi
              echo "⚠️ 构建产物下载无效，重试中..."
              sleep 2
            fi
          done
          
          # 4. 解压构建产物
          extraction_dir="/tmp/extracted_${{ steps.resolve_run_id.outputs.run_id }}"
          mkdir -p "$extraction_dir"
          unzip -q "$artifact_zip" -d "$extraction_dir"
          
          # 5. 找到并验证解压文件
          artifact_path=$(find "$extraction_dir" -type f | head -n1)
          if [ -z "$artifact_path" ]; then
            echo "❌ 错误：解压后找不到任何文件！解压目录内容："
            ls -laR "$extraction_dir"
            exit 1
          fi
          
          # 6. 准备输出
          artifact_name=$(basename "$artifact_path")
          release_title=${artifact_name%.*}
          
          echo "artifact_path=$artifact_path" >> $GITHUB_OUTPUT
          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT
          echo "release_title=$release_title" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. 创建 Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.resolve_run_id.outputs.tag }}
          name: ${{ steps.get_artifact.outputs.release_title }}
          draft: false
          prerelease: false
          generate_release_notes: true
          skip_if_tag_exists: true

      # 5. 上传构建产物
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_artifact.outputs.artifact_path }}
          asset_name: ${{ steps.get_artifact.outputs.artifact_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
